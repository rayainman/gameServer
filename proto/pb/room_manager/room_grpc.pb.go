// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v4.24.0
// source: room.proto

package room_manager_pb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// RoomManagerClient is the client API for RoomManager service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type RoomManagerClient interface {
	CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error)
	EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (RoomManager_EnterRoomClient, error)
	Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*BroadcastResponse, error)
}

type roomManagerClient struct {
	cc grpc.ClientConnInterface
}

func NewRoomManagerClient(cc grpc.ClientConnInterface) RoomManagerClient {
	return &roomManagerClient{cc}
}

func (c *roomManagerClient) CreateRoom(ctx context.Context, in *CreateRoomRequest, opts ...grpc.CallOption) (*CreateRoomResponse, error) {
	out := new(CreateRoomResponse)
	err := c.cc.Invoke(ctx, "/RoomManager.RoomManager/CreateRoom", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *roomManagerClient) EnterRoom(ctx context.Context, in *EnterRoomRequest, opts ...grpc.CallOption) (RoomManager_EnterRoomClient, error) {
	stream, err := c.cc.NewStream(ctx, &RoomManager_ServiceDesc.Streams[0], "/RoomManager.RoomManager/EnterRoom", opts...)
	if err != nil {
		return nil, err
	}
	x := &roomManagerEnterRoomClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type RoomManager_EnterRoomClient interface {
	Recv() (*BroadcastResponse, error)
	grpc.ClientStream
}

type roomManagerEnterRoomClient struct {
	grpc.ClientStream
}

func (x *roomManagerEnterRoomClient) Recv() (*BroadcastResponse, error) {
	m := new(BroadcastResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *roomManagerClient) Broadcast(ctx context.Context, in *BroadcastMessage, opts ...grpc.CallOption) (*BroadcastResponse, error) {
	out := new(BroadcastResponse)
	err := c.cc.Invoke(ctx, "/RoomManager.RoomManager/Broadcast", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// RoomManagerServer is the server API for RoomManager service.
// All implementations must embed UnimplementedRoomManagerServer
// for forward compatibility
type RoomManagerServer interface {
	CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error)
	EnterRoom(*EnterRoomRequest, RoomManager_EnterRoomServer) error
	Broadcast(context.Context, *BroadcastMessage) (*BroadcastResponse, error)
	mustEmbedUnimplementedRoomManagerServer()
}

// UnimplementedRoomManagerServer must be embedded to have forward compatible implementations.
type UnimplementedRoomManagerServer struct {
}

func (UnimplementedRoomManagerServer) CreateRoom(context.Context, *CreateRoomRequest) (*CreateRoomResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateRoom not implemented")
}
func (UnimplementedRoomManagerServer) EnterRoom(*EnterRoomRequest, RoomManager_EnterRoomServer) error {
	return status.Errorf(codes.Unimplemented, "method EnterRoom not implemented")
}
func (UnimplementedRoomManagerServer) Broadcast(context.Context, *BroadcastMessage) (*BroadcastResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Broadcast not implemented")
}
func (UnimplementedRoomManagerServer) mustEmbedUnimplementedRoomManagerServer() {}

// UnsafeRoomManagerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to RoomManagerServer will
// result in compilation errors.
type UnsafeRoomManagerServer interface {
	mustEmbedUnimplementedRoomManagerServer()
}

func RegisterRoomManagerServer(s grpc.ServiceRegistrar, srv RoomManagerServer) {
	s.RegisterService(&RoomManager_ServiceDesc, srv)
}

func _RoomManager_CreateRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateRoomRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).CreateRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomManager.RoomManager/CreateRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).CreateRoom(ctx, req.(*CreateRoomRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _RoomManager_EnterRoom_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(EnterRoomRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(RoomManagerServer).EnterRoom(m, &roomManagerEnterRoomServer{stream})
}

type RoomManager_EnterRoomServer interface {
	Send(*BroadcastResponse) error
	grpc.ServerStream
}

type roomManagerEnterRoomServer struct {
	grpc.ServerStream
}

func (x *roomManagerEnterRoomServer) Send(m *BroadcastResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _RoomManager_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(RoomManagerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/RoomManager.RoomManager/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(RoomManagerServer).Broadcast(ctx, req.(*BroadcastMessage))
	}
	return interceptor(ctx, in, info, handler)
}

// RoomManager_ServiceDesc is the grpc.ServiceDesc for RoomManager service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var RoomManager_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "RoomManager.RoomManager",
	HandlerType: (*RoomManagerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateRoom",
			Handler:    _RoomManager_CreateRoom_Handler,
		},
		{
			MethodName: "Broadcast",
			Handler:    _RoomManager_Broadcast_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "EnterRoom",
			Handler:       _RoomManager_EnterRoom_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "room.proto",
}
